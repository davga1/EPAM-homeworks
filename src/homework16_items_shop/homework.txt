Պատկերացրեք ունեք հեռուստացույցների, նոթբուքերի ու փոքր չափի աքսեսուարների (հետագայում նշվածա կոնկրետ ինչեր) խանութ։
Ենթադրենք դուք ունեք հնարավորություն օնլայն գնումներ իրականացնելու էդ խանութից։ Ենթադրենք ակցիայա, ու որոշ ապրանքներ կարաք ստանաք նվերներ։
Գնում եք նոթբուք, հետը նվեր եք ստանում հեռախոս մինչև 100 հազարի սահմաններում ըստ ցանկության
Գնում եք հեռուստացույց, հետը ստանում մինչև 30 հազար արժողությամբ ֆեն ըստ ցանկության։
Ձեր ցանկությանը դուք պետքա կարգավորեք՝ ուզում եք թե չէ։
Դուք պետքա ունենաք Basket, որն ի սկզբանե կունենա Item-ների դատարկ ցուցակ։
Ամեն Item-ը կարա ունենա հիմնական ապրանք ու հնարավոր նվեր, որը կարա լինի, կարա նաև չէ։
Դուք կարաք ընդամենը մի նվեր ստանաք Basket-ից checkout-ի ժամանակ։ Այսինքն վերը նշված 2 դեպքերից մեկից կարաք օգտվեք։
Basket-ի Ձեր checkout-ի մեթոդը պետքա ընդունի քարտը, որով վճարումա կատարվելու։ Checkout-ի ժամանակ պետքա
համոզվեք, որ ընդամենը մի նվեր կա ընտրված. Եթե նվեր չկա կամ մի հատա, ուրեմն նորմալ հաշվեք ամբողջ գինը։
Եթե մեկից ավել են նվերները, ուրեմն դա բացառությունա, որը կարելիա բռնել ծրագրի աշխատանքի ժամանակ։
Բացառությունը աբռաբոտկա անելուց, պետքա համապատասխան մեսիջ տպեք ու խնդրեք, որ ջնջի ապրանքներից մեկը։
Գնորդը պիտի ինփութ անի թե որ ID-ով Item-ի նվերնա ջնջում։ Բուն ջնջելու օպերացիան կարաք ենթադրեք տվյալ նվերի վրա նայող ռեֆերենսը null սարքելը։
Ջնջելու օպերացիան իրականացնելուց հետո կարաք նորից հաշվեք գինը։
Եթե հանկարծ, ни дай Бог, գնորդը չի ջնջում նվերներից մեկը
(կարաք ասենք Item-ների լիստի մեջ null-ի վերագրեք առանց էն էլ null արժեք ունեցող նվերի reference-ը, որ վերջին հաշվով բան չփոխվի),
ուրեմն էս անգամ բացառությունը պետք չի աբռաբոտկա անել, այլ պետքա RuntimeException-ով ընդհատել ծրագիրը։
ստուգեք, թե արդյոք քարտի վրայի գումարը բավականացնումա առևտուրի համար, Եթե չէ, ուրեմն ընդհատում եք ծրագիրը RuntimeException-ով։
Եթե ամեն ինչ նորմալա ընթանում, basket-ին պետքա վերագրել նոր Basket օբյեկտ, որը նորից բաղկացած կլինի դատարկ Item-ներից։